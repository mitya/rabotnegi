# def test_sql
#   RECORD_COUNT = 1000
# 
#   mysql = Mysql2::Client.new(host: "localhost", username: "root", database: "rabotnegi_dev")
#   query = "SELECT `vacancies`.* FROM `vacancies` LIMIT #{RECORD_COUNT}"
# 
#   p_ar = -> do
#     results = Vacancy.limit(RECORD_COUNT).all[1]
#   end
# 
#   p_select_rows = -> do
#     Vacancy.connection.select_rows(query)[1]
#   end
# 
#   p_select_all = -> do
#     Vacancy.connection.select_all(query)[1]
#   end
# 
#   p_mysql_2 = -> do
#     results = []
#     mysql.query(query).each { |x| results << x }
#     results
#   end
# 
#   Vacancy.uncached do
#     Vacancy.limit(5).all
# 
#     Benchmark.bm(20) do |b|
#       Rails.logger.debug "---------------------------------------"
# 
#       b.report("p_ar", &p_ar)
#       b.report("p_select_rows", &p_select_rows)
#       b.report("p_select_all", &p_select_all)
#       b.report("p_mysql_2", &p_mysql_2)
#     end
#   end  
# end

db = Mongo::Connection.new.db("rabotnegi_demo")

def mapper(ar_attributes)
  ar_attributes.each_pair { |k, v| ar_attributes[k] = v.utc if ActiveSupport::TimeWithZone === v }
end

# db.collection("vacancies").remove
# 
# Vacancy.find_each { |vacancy| db.collection("vacancies").insert(mapper(vacancy.attributes)) }

p db.collection("vacancies").count

# v = db.collection("vacancies").find_one(id: 909)
# p v
# v[:description] = nil
# v[:created_at] = nil
# v['description'] = nil
# v['created_at'] = Vacancy.first.created_at.utc
# db.collection("vacancies").update({"_id" => v["_id"]}, v)
# p v
