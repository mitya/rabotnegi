# coding: utf-8

N = 100
RECORD_COUNT = 1000

def test_sql
  mysql = Mysql2::Client.new(host: "localhost", username: "root", database: "rabotnegi_dev")
  query = "SELECT `vacancies`.* FROM `vacancies` LIMIT #{RECORD_COUNT}"

  p_ar = -> do
    results = Vacancy.limit(RECORD_COUNT).all[1]
  end

  p_select_rows = -> do
    Vacancy.connection.select_rows(query)[1]
  end

  p_select_all = -> do
    Vacancy.connection.select_all(query)[1]
  end

  p_mysql_2 = -> do
    results = []
    mysql.query(query).each { |x| results << x }
    results
  end

  Vacancy.uncached do
    Vacancy.limit(5).all

    Benchmark.bm(20) do |b|
      Rails.logger.debug "---------------------------------------"

      b.report("p_ar", &p_ar)
      b.report("p_select_rows", &p_select_rows)
      b.report("p_select_all", &p_select_all)
      b.report("p_mysql_2", &p_mysql_2)
    end
  end  
end

def test_json
  # data = Vacancy.first.attributes
  data = Vacancy.limit(50).map { |v| v.attributes.slice(:title, :city, :industry, :external_id, :salary_min, :salary_max, :employer_name) }
  
  # puts data.as_json
  # puts JSON.generate(data.as_json)
  puts JSON.generate(data)  
  
  Benchmark.bm(40) do |b|
    b.report("as_json") do
      N.times { data.as_json }
    end

    b.report("to_json (ActiveSupport::JSON.encode)") do
      N.times { data.to_json }
    end

    b.report("JSON.generate(x.as_json)") do
      N.times { JSON.generate(data.as_json) }
    end

    b.report("JSON.generate") do
      N.times { JSON.generate(data) }
    end
  end
end

test_json
